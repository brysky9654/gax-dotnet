/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file or at
 * https://developers.google.com/open-source/licenses/bsd
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/monitored_resource.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Api {

  /// <summary>Holder for reflection information generated from google/api/monitored_resource.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class MonitoredResourceReflection {

    #region Descriptor
    /// <summary>File descriptor for google/api/monitored_resource.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonitoredResourceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNnb29nbGUvYXBpL21vbml0b3JlZF9yZXNvdXJjZS5wcm90bxIKZ29vZ2xl",
            "LmFwaRoWZ29vZ2xlL2FwaS9sYWJlbC5wcm90byKDAQobTW9uaXRvcmVkUmVz",
            "b3VyY2VEZXNjcmlwdG9yEgwKBHR5cGUYASABKAkSFAoMZGlzcGxheV9uYW1l",
            "GAIgASgJEhMKC2Rlc2NyaXB0aW9uGAMgASgJEisKBmxhYmVscxgEIAMoCzIb",
            "Lmdvb2dsZS5hcGkuTGFiZWxEZXNjcmlwdG9yIosBChFNb25pdG9yZWRSZXNv",
            "dXJjZRIMCgR0eXBlGAEgASgJEjkKBmxhYmVscxgCIAMoCzIpLmdvb2dsZS5h",
            "cGkuTW9uaXRvcmVkUmVzb3VyY2UuTGFiZWxzRW50cnkaLQoLTGFiZWxzRW50",
            "cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUIqCg5jb20uZ29v",
            "Z2xlLmFwaUIWTW9uaXRvcmVkUmVzb3VyY2VQcm90b1ABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.LabelReflection.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Google.Api.MonitoredResourceDescriptor), global::Google.Api.MonitoredResourceDescriptor.Parser, new[]{ "Type", "DisplayName", "Description", "Labels" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Api.MonitoredResource), global::Google.Api.MonitoredResource.Parser, new[]{ "Type", "Labels" }, null, null, new pbr::GeneratedCodeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  A descriptor that describes the schema of [MonitoredResource][google.api.MonitoredResource].
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MonitoredResourceDescriptor : pb::IMessage<MonitoredResourceDescriptor> {
    private static readonly pb::MessageParser<MonitoredResourceDescriptor> _parser = new pb::MessageParser<MonitoredResourceDescriptor>(() => new MonitoredResourceDescriptor());
    public static pb::MessageParser<MonitoredResourceDescriptor> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.MonitoredResourceReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MonitoredResourceDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MonitoredResourceDescriptor(MonitoredResourceDescriptor other) : this() {
      type_ = other.type_;
      displayName_ = other.displayName_;
      description_ = other.description_;
      labels_ = other.labels_.Clone();
    }

    public MonitoredResourceDescriptor Clone() {
      return new MonitoredResourceDescriptor(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    ///  The monitored resource type. For example, the type `"cloudsql_database"`
    ///  represents databases in Google Cloud SQL.
    /// </summary>
    public string Type {
      get { return type_; }
      set {
        type_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "display_name" field.</summary>
    public const int DisplayNameFieldNumber = 2;
    private string displayName_ = "";
    /// <summary>
    ///  A concise name for the monitored resource type that can be displayed in
    ///  user interfaces. For example, `"Google Cloud SQL Database"`.
    /// </summary>
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    ///  A detailed description of the monitored resource type that can be used in
    ///  documentation.
    /// </summary>
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Google.Api.LabelDescriptor> _repeated_labels_codec
        = pb::FieldCodec.ForMessage(34, global::Google.Api.LabelDescriptor.Parser);
    private readonly pbc::RepeatedField<global::Google.Api.LabelDescriptor> labels_ = new pbc::RepeatedField<global::Google.Api.LabelDescriptor>();
    /// <summary>
    ///  A set of labels that can be used to describe instances of this monitored
    ///  resource type. For example, Google Cloud SQL databases can be labeled with
    ///  their `"database_id"` and their `"zone"`.
    /// </summary>
    public pbc::RepeatedField<global::Google.Api.LabelDescriptor> Labels {
      get { return labels_; }
    }

    public override bool Equals(object other) {
      return Equals(other as MonitoredResourceDescriptor);
    }

    public bool Equals(MonitoredResourceDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (DisplayName != other.DisplayName) return false;
      if (Description != other.Description) return false;
      if(!labels_.Equals(other.labels_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= labels_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DisplayName);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      labels_.WriteTo(output, _repeated_labels_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += labels_.CalculateSize(_repeated_labels_codec);
      return size;
    }

    public void MergeFrom(MonitoredResourceDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      labels_.Add(other.labels_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            DisplayName = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///  A monitored resource describes a resource that can be used for monitoring
  ///  purpose. It can also be used for logging, billing, and other purposes. Each
  ///  resource has a `type` and a set of `labels`. The labels contain information
  ///  that identifies the resource and describes attributes of it. For example,
  ///  you can use monitored resource to describe a normal file, where the resource
  ///  has `type` as `"file"`, the label `path` identifies the file, and the label
  ///  `size` describes the file size. The monitoring system can use a set of
  ///  monitored resources of files to generate file size distribution.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class MonitoredResource : pb::IMessage<MonitoredResource> {
    private static readonly pb::MessageParser<MonitoredResource> _parser = new pb::MessageParser<MonitoredResource>(() => new MonitoredResource());
    public static pb::MessageParser<MonitoredResource> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.MonitoredResourceReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public MonitoredResource() {
      OnConstruction();
    }

    partial void OnConstruction();

    public MonitoredResource(MonitoredResource other) : this() {
      type_ = other.type_;
      labels_ = other.labels_.Clone();
    }

    public MonitoredResource Clone() {
      return new MonitoredResource(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    ///  The monitored resource type. This field must match the corresponding
    ///  [MonitoredResourceDescriptor.type][google.api.MonitoredResourceDescriptor.type] to this resource..  For example,
    ///  `"cloudsql_database"` represents Cloud SQL databases.
    /// </summary>
    public string Type {
      get { return type_; }
      set {
        type_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_labels_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> labels_ = new pbc::MapField<string, string>();
    /// <summary>
    ///  Values for some or all of the labels listed in the associated monitored
    ///  resource descriptor. For example, you specify a specific Cloud SQL database
    ///  by supplying values for both the `"database_id"` and `"zone"` labels.
    /// </summary>
    public pbc::MapField<string, string> Labels {
      get { return labels_; }
    }

    public override bool Equals(object other) {
      return Equals(other as MonitoredResource);
    }

    public bool Equals(MonitoredResource other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!Labels.Equals(other.Labels)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= Labels.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      labels_.WriteTo(output, _map_labels_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += labels_.CalculateSize(_map_labels_codec);
      return size;
    }

    public void MergeFrom(MonitoredResource other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      labels_.Add(other.labels_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            labels_.AddEntriesFrom(input, _map_labels_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
