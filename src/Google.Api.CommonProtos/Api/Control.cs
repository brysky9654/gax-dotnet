/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file or at
 * https://developers.google.com/open-source/licenses/bsd
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/control.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Api {

  /// <summary>Holder for reflection information generated from google/api/control.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ControlReflection {

    #region Descriptor
    /// <summary>File descriptor for google/api/control.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ControlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chhnb29nbGUvYXBpL2NvbnRyb2wucHJvdG8SCmdvb2dsZS5hcGkiHgoHQ29u",
            "dHJvbBITCgtlbnZpcm9ubWVudBgBIAEoCUIgCg5jb20uZ29vZ2xlLmFwaUIM",
            "Q29udHJvbFByb3RvUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Google.Api.Control), global::Google.Api.Control.Parser, new[]{ "Environment" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  Selects and configures the service controller used by the service.  The
  ///  service controller handles features like abuse, quota, billing, logging,
  ///  monitoring, etc.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Control : pb::IMessage<Control> {
    private static readonly pb::MessageParser<Control> _parser = new pb::MessageParser<Control>(() => new Control());
    public static pb::MessageParser<Control> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Api.ControlReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Control() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Control(Control other) : this() {
      environment_ = other.environment_;
    }

    public Control Clone() {
      return new Control(this);
    }

    /// <summary>Field number for the "environment" field.</summary>
    public const int EnvironmentFieldNumber = 1;
    private string environment_ = "";
    /// <summary>
    ///  The service control environment to use. If empty, no control plane
    ///  feature (like quota and billing) will be enabled.
    /// </summary>
    public string Environment {
      get { return environment_; }
      set {
        environment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as Control);
    }

    public bool Equals(Control other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Environment != other.Environment) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Environment.Length != 0) hash ^= Environment.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Environment.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Environment);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Environment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Environment);
      }
      return size;
    }

    public void MergeFrom(Control other) {
      if (other == null) {
        return;
      }
      if (other.Environment.Length != 0) {
        Environment = other.Environment;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Environment = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
