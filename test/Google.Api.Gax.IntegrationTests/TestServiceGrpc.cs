// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_service.proto
// Original file comments:
//
// Copyright 2016 Google Inc. All Rights Reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd
//
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Api.Gax.IntegrationTests {
  public static class TestService
  {
    static readonly string __ServiceName = "google.api.gax.integration_tests.TestService";

    static readonly Marshaller<global::Google.Api.Gax.IntegrationTests.SimpleRequest> __Marshaller_SimpleRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Api.Gax.IntegrationTests.SimpleRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Api.Gax.IntegrationTests.SimpleResponse> __Marshaller_SimpleResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Api.Gax.IntegrationTests.SimpleResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Api.Gax.IntegrationTests.SimpleRequest, global::Google.Api.Gax.IntegrationTests.SimpleResponse> __Method_DoSimple = new Method<global::Google.Api.Gax.IntegrationTests.SimpleRequest, global::Google.Api.Gax.IntegrationTests.SimpleResponse>(
        MethodType.Unary,
        __ServiceName,
        "DoSimple",
        __Marshaller_SimpleRequest,
        __Marshaller_SimpleResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Api.Gax.IntegrationTests.TestServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for TestService</summary>
    [System.Obsolete("Client side interfaced will be removed in the next release. Use client class directly.")]
    public interface ITestServiceClient
    {
      global::Google.Api.Gax.IntegrationTests.SimpleResponse DoSimple(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Api.Gax.IntegrationTests.SimpleResponse DoSimple(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Api.Gax.IntegrationTests.SimpleResponse> DoSimpleAsync(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Api.Gax.IntegrationTests.SimpleResponse> DoSimpleAsync(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, CallOptions options);
    }

    /// <summary>Interface of server-side implementations of TestService</summary>
    [System.Obsolete("Service implementations should inherit from the generated abstract base class instead.")]
    public interface ITestService
    {
      global::System.Threading.Tasks.Task<global::Google.Api.Gax.IntegrationTests.SimpleResponse> DoSimple(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, ServerCallContext context);
    }

    /// <summary>Base class for server-side implementations of TestService</summary>
    public abstract class TestServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Google.Api.Gax.IntegrationTests.SimpleResponse> DoSimple(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, ServerCallContext context)
      {
        throw new RpcException(new Status(StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TestService</summary>
    #pragma warning disable 0618
    public class TestServiceClient : ClientBase<TestServiceClient>, ITestServiceClient
    #pragma warning restore 0618
    {
      public TestServiceClient(Channel channel) : base(channel)
      {
      }
      public TestServiceClient(CallInvoker callInvoker) : base(callInvoker)
      {
      }
      ///<summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TestServiceClient() : base()
      {
      }
      ///<summary>Protected constructor to allow creation of configured clients.</summary>
      protected TestServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Google.Api.Gax.IntegrationTests.SimpleResponse DoSimple(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoSimple(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Google.Api.Gax.IntegrationTests.SimpleResponse DoSimple(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DoSimple, null, options, request);
      }
      public virtual AsyncUnaryCall<global::Google.Api.Gax.IntegrationTests.SimpleResponse> DoSimpleAsync(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DoSimpleAsync(request, new CallOptions(headers, deadline, cancellationToken));
      }
      public virtual AsyncUnaryCall<global::Google.Api.Gax.IntegrationTests.SimpleResponse> DoSimpleAsync(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DoSimple, null, options, request);
      }
      protected override TestServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TestServiceClient(configuration);
      }
    }

    /// <summary>Creates a new client for TestService</summary>
    public static TestServiceClient NewClient(Channel channel)
    {
      return new TestServiceClient(channel);
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(ITestService serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_DoSimple, serviceImpl.DoSimple).Build();
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    #pragma warning disable 0618
    public static ServerServiceDefinition BindService(TestServiceBase serviceImpl)
    #pragma warning restore 0618
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_DoSimple, serviceImpl.DoSimple).Build();
    }

  }
}
#endregion
