/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 * Use of this source code is governed by a BSD-style
 * license that can be found in the LICENSE file or at
 * https://developers.google.com/open-source/licenses/bsd
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Api.Gax.IntegrationTests {
  public static class TestService
  {
    static readonly string __ServiceName = "google.api.gax.integration_tests.TestService";

    static readonly Marshaller<global::Google.Api.Gax.IntegrationTests.SimpleRequest> __Marshaller_SimpleRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Api.Gax.IntegrationTests.SimpleRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Api.Gax.IntegrationTests.SimpleResponse> __Marshaller_SimpleResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Api.Gax.IntegrationTests.SimpleResponse.Parser.ParseFrom);

    static readonly Method<global::Google.Api.Gax.IntegrationTests.SimpleRequest, global::Google.Api.Gax.IntegrationTests.SimpleResponse> __Method_DoSimple = new Method<global::Google.Api.Gax.IntegrationTests.SimpleRequest, global::Google.Api.Gax.IntegrationTests.SimpleResponse>(
        MethodType.Unary,
        __ServiceName,
        "DoSimple",
        __Marshaller_SimpleRequest,
        __Marshaller_SimpleResponse);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Api.Gax.IntegrationTests.TestServiceReflection.Descriptor.Services[0]; }
    }

    // client interface
    public interface ITestServiceClient
    {
      global::Google.Api.Gax.IntegrationTests.SimpleResponse DoSimple(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Api.Gax.IntegrationTests.SimpleResponse DoSimple(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Api.Gax.IntegrationTests.SimpleResponse> DoSimpleAsync(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Api.Gax.IntegrationTests.SimpleResponse> DoSimpleAsync(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, CallOptions options);
    }

    // server-side interface
    public interface ITestService
    {
      Task<global::Google.Api.Gax.IntegrationTests.SimpleResponse> DoSimple(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, ServerCallContext context);
    }

    // client stub
    public class TestServiceClient : ClientBase, ITestServiceClient
    {
      public TestServiceClient(Channel channel) : base(channel)
      {
      }
      public global::Google.Api.Gax.IntegrationTests.SimpleResponse DoSimple(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_DoSimple, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Api.Gax.IntegrationTests.SimpleResponse DoSimple(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_DoSimple, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Api.Gax.IntegrationTests.SimpleResponse> DoSimpleAsync(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_DoSimple, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Api.Gax.IntegrationTests.SimpleResponse> DoSimpleAsync(global::Google.Api.Gax.IntegrationTests.SimpleRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_DoSimple, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(ITestService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_DoSimple, serviceImpl.DoSimple).Build();
    }

    // creates a new client
    public static TestServiceClient NewClient(Channel channel)
    {
      return new TestServiceClient(channel);
    }

  }
}
#endregion
